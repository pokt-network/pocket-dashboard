name: Testnet Deployment

on:
  push:
    branches: [ staging ]

jobs:
  build:
    name: Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 12.15.0 ]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn
      working-directory: frontend
      run: yarn
    - name: Production build
      working-directory: frontend
      env:
        GENERATE_SOURCEMAP: false
        PUBLIC_URL: https://dashboard.testnet.pokt.network
        REACT_APP_BACKEND_URL: https://api-testnet.dashboard.pokt.network:4200
        REACT_APP_POCKET_NETWORK_MAX_DISPATCHER: 10
        REACT_APP_POCKET_NETWORK_MAX_SESSIONS: 24
        REACT_APP_POCKET_NETWORK_REQUEST_TIMEOUT: 60000
        REACT_APP_POCKET_NETWORK_DISPATCHERS: https://node1.testnet.pokt.network:443
        REACT_APP_POCKET_NETWORK_TX_FEE: 10000
        REACT_APP_POCKET_NETWORK_CHAIN_ID: testnet
        REACT_APP_POCKET_FREE_TIER_STAKE_AMOUNT: 25000000000
        REACT_APP_STAKE_DEFAULT_STATUS: Unstaked
        REACT_APP_DEFAULT_MAX_RELAYS_PER_DAY: 5010024
        REACT_APP_SECURE_LS_SECRET: ${{ secrets.REACT_APP_SECURE_LS_SECRET }}
        REACT_APP_PAYMENT_DEFAULT_CLIENT_ID: ${{ secrets.PAYMENT_TESTNET_DEFAULT_CLIENT_ID }}
        REACT_APP_RECAPTCHA_CLIENT_KEY: ${{ secrets.REACT_APP_RECAPTCHA_CLIENT_KEY }}
        REACT_APP_POCKET_NETWORK_GATEWAY_CLIENT_PUB_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PUB_KEY }}
        REACT_APP_POCKET_NETWORK_AAT_VERSION: 0.0.1
        REACT_APP_SESSION_LENGTH: 600
        REACT_APP_POKT_USD_MARKET_PRICE: 0.08
      run: yarn build:prod
    - name: Deploy to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_TESTNET_BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SOURCE_DIR: "frontend/build"
    - name: Clear CloudFront Cache
      uses: awact/cloudfront-action@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        DISTRIBUTION_ID: ${{ secrets.AWS_TESTNET_DISTRIBUTION_ID }}
  deploy:
    name: Backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Make envfile
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_DATABASE_URL: ${{ secrets.MONGO_TESTNET_DATABASE_URL }}
        envkey_DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_TESTNET_ENCRYPTION_KEY }}
        envkey_POCKET_NETWORK_MAIN_FUND_ACCOUNT: ${{ secrets.POCKET_NETWORK_TESTNET_MAIN_FUND_ACCOUNT }}
        envkey_POCKET_NETWORK_MAIN_FUND_ADDRESS: ${{ secrets.POCKET_NETWORK_TESTNET_MAIN_FUND_ADDRESS }}
        envkey_POCKET_NETWORK_FREE_TIER_FUND_ACCOUNT: ${{ secrets.POCKET_NETWORK_TESTNET_FREE_TIER_FUND_ACCOUNT }}
        envkey_POCKET_NETWORK_FREE_TIER_FUND_ADDRESS: ${{ secrets.POCKET_NETWORK_TESTNET_FREE_TIER_FUND_ADDRESS }}
        envkey_POCKET_NETWORK_CLIENT_PUB_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PUB_KEY }}
        envkey_POCKET_NETWORK_CLIENT_PRIV_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PRIV_KEY }}
        envkey_POCKET_NETWORK_CLIENT_PASSPHRASE: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PASSPHRASE }}
        envkey_POCKET_NETWORK_APP_PUB_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_APP_PUB_KEY }}
        envkey_POCKET_NETWORK_APP_SIGNATURE: ${{ secrets.POCKET_NETWORK_TESTNET_APP_SIGNATURE }}
        envkey_JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        envkey_JWT_EXPIRATION: 5m
        envkey_JWT_REFRESH_EXPIRATION: 10m
        envkey_AUTH_PROVIDER_GITHUB_CLIENT_ID: ${{ secrets.AUTH_PROVIDER_GITHUB_CLIENT_ID }}
        envkey_AUTH_PROVIDER_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_PROVIDER_GITHUB_CLIENT_SECRET }}
        envkey_AUTH_PROVIDER_GOOGLE_CLIENT_ID: ${{ secrets.AUTH_PROVIDER_GOOGLE_CLIENT_ID }}
        envkey_AUTH_PROVIDER_GOOGLE_CLIENT_SECRET: ${{ secrets.AUTH_PROVIDER_GOOGLE_CLIENT_SECRET }}
        envkey_PAYMENT_DEFAULT_CLIENT_ID: ${{ secrets.PAYMENT_TESTNET_DEFAULT_CLIENT_ID }}
        envkey_PAYMENT_DEFAULT_CLIENT_SECRET: ${{ secrets.PAYMENT_TESTNET_DEFAULT_CLIENT_SECRET }}
        envkey_EMAIL_API_KEY: ${{ secrets.EMAIL_API_KEY }}
        envkey_RECAPTCHA_SERVER_SECRET: ${{ secrets.RECAPTCHA_SERVER_SECRET }}
        envkey_POKT_USD_MARKET_PRICE: ${{ secrets.POKT_USD_MARKET_PRICE }}
        envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_TESTNET_ACCESS_KEY_ID }}
        envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_TESTNET_SECRET_ACCESS_KEY }}
        envkey_AWS_S3_FTS_BUCKET: ${{ secrets.AWS_TESTNET_S3_FTS_BUCKET }}
        envkey_AWS_REGION: us-west-2
        envkey_DATABASE_NAME: gateway-testnet
        envkey_POCKET_NETWORK_MAX_DISPATCHER: 7
        envkey_POCKET_NETWORK_REQUEST_TIMEOUT: 60000
        envkey_POCKET_NETWORK_MAX_SESSIONS: 1000000
        envkey_POCKET_NETWORK_SERVICE_WORKER_DATABASE_URL: redis://dashboard-testnet.js6zbp.ng.0001.usw2.cache.amazonaws.com:6379
        envkey_POCKET_NETWORK_SERVICE_WORKER_DELAYED_START_TIME: 60000
        envkey_POCKET_NETWORK_SERVICE_WORKER_ATTEMPTS: 15
        envkey_POCKET_FREE_TIER_STAKE_AMOUNT: 25000000000
        envkey_POCKET_NETWORK_DISPATCHERS: https://node1.testnet.pokt.network:443,https://node2.testnet.pokt.network:443,https://node3.testnet.pokt.network:443,https://node4.testnet.pokt.network:443,https://node5.testnet.pokt.network:443,https://node6.testnet.pokt.network:443,https://node7.testnet.pokt.network:443
        envkey_POCKET_NETWORK_CHAIN_HASH: "0002"
        envkey_POCKET_NETWORK_CHAIN_ID: testnet
        envkey_POCKET_NETWORK_AAT_VERSION: 0.0.1
        envkey_POCKET_NETWORK_TRANSACTION_FEE: 10000
        envkey_POCKET_FREE_TIER_MAX_RELAY_PER_DAY_AMOUNT: 10000000
        envkey_POCKET_NETWORK_PROVIDER_TYPE: HTTP
        envkey_POCKET_NETWORK_HTTP_PROVIDER_NODE: https://node1.testnet.pokt.network:443
        envkey_AUTH_PROVIDER_GITHUB_CALLBACK_URL: https://dashboard.testnet.pokt.network/api/auth/provider/github
        envkey_AUTH_PROVIDER_GOOGLE_CALLBACK_URL: https://dashboard.testnet.pokt.network/api/auth/provider/google
        envkey_EMAIL_FROM: dashboard@pokt.network
        envkey_CHECKOUT_DEFAULT_CURRENCY: USD
        envkey_CHECKOUT_MIN_RELAYS_PER_DAY: 504
        envkey_CHECKOUT_MAX_RELAYS_PER_DAY: 5010024
        envkey_CHECKOUT_MIN_VALIDATOR_POWER: 15500
        envkey_CHECKOUT_MAX_VALIDATOR_POWER: 125000
        envkey_CHECKOUT_BASE_RELAY_PER_POKT: 1.67
        envkey_CHECKOUT_STABILITY: 0
        envkey_CHECKOUT_SESSIONS_PER_DAY: 24
        envkey_CHECKOUT_P_RATE: 1
        file_name: backend/.env

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dashboard-testnet
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend/ecs-task-definition-testnet.json
        container-name: dashboard-testnet
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: dashboard-testnet-service
        cluster: dashboard-testnet
        wait-for-service-stability: true

